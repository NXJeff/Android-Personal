package merlin.model.raw;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import merlin.model.raw.BaseReminder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table reminder.
*/
public class BaseReminderDao extends AbstractDao<BaseReminder, Long> {

    public static final String TABLENAME = "reminder";

    /**
     * Properties of entity BaseReminder.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Subject = new Property(1, String.class, "subject", false, "SUBJECT");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
        public final static Property FromDate = new Property(3, java.util.Date.class, "fromDate", false, "FROM_DATE");
        public final static Property ToDate = new Property(4, java.util.Date.class, "toDate", false, "TO_DATE");
        public final static Property AtTime = new Property(5, java.util.Date.class, "atTime", false, "AT_TIME");
        public final static Property RepeatType = new Property(6, Integer.class, "repeatType", false, "REPEAT_TYPE");
        public final static Property ReminderType = new Property(7, String.class, "reminderType", false, "REMINDER_TYPE");
        public final static Property CustomRepeatMode = new Property(8, Integer.class, "customRepeatMode", false, "CUSTOM_REPEAT_MODE");
        public final static Property EntityId = new Property(9, String.class, "entityId", false, "ENTITY_ID");
        public final static Property Color = new Property(10, Integer.class, "color", false, "COLOR");
        public final static Property RepeatEveryNDay = new Property(11, Integer.class, "repeatEveryNDay", false, "REPEAT_EVERY_NDAY");
        public final static Property DosesInTotal = new Property(12, Integer.class, "dosesInTotal", false, "DOSES_IN_TOTAL");
        public final static Property DosesPerDay = new Property(13, Integer.class, "dosesPerDay", false, "DOSES_PER_DAY");
        public final static Property Enabled = new Property(14, Boolean.class, "enabled", false, "ENABLED");
        public final static Property Status = new Property(15, String.class, "status", false, "STATUS");
    };


    public BaseReminderDao(DaoConfig config) {
        super(config);
    }
    
    public BaseReminderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'reminder' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'SUBJECT' TEXT," + // 1: subject
                "'DESCRIPTION' TEXT," + // 2: description
                "'FROM_DATE' INTEGER," + // 3: fromDate
                "'TO_DATE' INTEGER," + // 4: toDate
                "'AT_TIME' INTEGER," + // 5: atTime
                "'REPEAT_TYPE' INTEGER," + // 6: repeatType
                "'REMINDER_TYPE' TEXT," + // 7: reminderType
                "'CUSTOM_REPEAT_MODE' INTEGER," + // 8: customRepeatMode
                "'ENTITY_ID' TEXT," + // 9: entityId
                "'COLOR' INTEGER," + // 10: color
                "'REPEAT_EVERY_NDAY' INTEGER," + // 11: repeatEveryNDay
                "'DOSES_IN_TOTAL' INTEGER," + // 12: dosesInTotal
                "'DOSES_PER_DAY' INTEGER," + // 13: dosesPerDay
                "'ENABLED' INTEGER," + // 14: enabled
                "'STATUS' TEXT);"); // 15: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'reminder'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BaseReminder entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String subject = entity.getSubject();
        if (subject != null) {
            stmt.bindString(2, subject);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        java.util.Date fromDate = entity.getFromDate();
        if (fromDate != null) {
            stmt.bindLong(4, fromDate.getTime());
        }
 
        java.util.Date toDate = entity.getToDate();
        if (toDate != null) {
            stmt.bindLong(5, toDate.getTime());
        }
 
        java.util.Date atTime = entity.getAtTime();
        if (atTime != null) {
            stmt.bindLong(6, atTime.getTime());
        }
 
        Integer repeatType = entity.getRepeatType();
        if (repeatType != null) {
            stmt.bindLong(7, repeatType);
        }
 
        String reminderType = entity.getReminderType();
        if (reminderType != null) {
            stmt.bindString(8, reminderType);
        }
 
        Integer customRepeatMode = entity.getCustomRepeatMode();
        if (customRepeatMode != null) {
            stmt.bindLong(9, customRepeatMode);
        }
 
        String entityId = entity.getEntityId();
        if (entityId != null) {
            stmt.bindString(10, entityId);
        }
 
        Integer color = entity.getColor();
        if (color != null) {
            stmt.bindLong(11, color);
        }
 
        Integer repeatEveryNDay = entity.getRepeatEveryNDay();
        if (repeatEveryNDay != null) {
            stmt.bindLong(12, repeatEveryNDay);
        }
 
        Integer dosesInTotal = entity.getDosesInTotal();
        if (dosesInTotal != null) {
            stmt.bindLong(13, dosesInTotal);
        }
 
        Integer dosesPerDay = entity.getDosesPerDay();
        if (dosesPerDay != null) {
            stmt.bindLong(14, dosesPerDay);
        }
 
        Boolean enabled = entity.getEnabled();
        if (enabled != null) {
            stmt.bindLong(15, enabled ? 1l: 0l);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(16, status);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BaseReminder readEntity(Cursor cursor, int offset) {
        BaseReminder entity = new BaseReminder( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // subject
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // description
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // fromDate
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // toDate
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // atTime
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // repeatType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // reminderType
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // customRepeatMode
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // entityId
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // color
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // repeatEveryNDay
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // dosesInTotal
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // dosesPerDay
            cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0, // enabled
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BaseReminder entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSubject(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFromDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setToDate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setAtTime(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setRepeatType(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setReminderType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCustomRepeatMode(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setEntityId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setColor(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setRepeatEveryNDay(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setDosesInTotal(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setDosesPerDay(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setEnabled(cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0);
        entity.setStatus(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(BaseReminder entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(BaseReminder entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
